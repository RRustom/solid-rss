{"version":3,"sources":["helpers/addFeed.js","helpers/byDate.js","helpers/getFeedSources.js","hooks/useDocument.js","components/FeedSource.js","components/NewFeedSource.js","components/FeedSourceList.js","components/Article.js","helpers/getArticles.js","components/Articles.js","pages/Profile.js","helpers/addArticle.js","components/SaveButton.js","helpers/fetchFeed.js","components/Feed.js","components/FeedList.js","components/Dashboard.js","pages/Home.js","helpers/getPodData.js","hooks/useProfile.js","App.js","index.js"],"names":["addFeed","name","source","feedList","a","newFeed","addSubject","addRef","rdf","type","schema","DataFeed","addString","url","addDateTime","dateCreated","Date","now","save","byDate","itemA","itemB","updatedDateA","getDateTime","dateModified","updatedDateB","createdDateA","createdDateB","latestA","latestB","getTime","getFeedSources","feedSourcesList","getSubjectsOfType","useDocument","virtualDocument","useState","document","setDocument","useEffect","fetchDocument","then","FeedSource","props","isSubmitting","setIsSubmitting","feedSource","getString","feedURL","setFeedURL","feedName","setFeedName","saveFeedSource","event","preventDefault","onChange","updatedName","updatedURL","mode","isLoading","onSubmit","className","htmlFor","value","e","target","required","disabled","onClick","onCancelEdit","NewFeedSource","onSave","placeholder","FeedSourceList","podData","feedSourcesDoc","updateFeedList","React","useReducer","prevState","concat","filter","ref","feedInEditMode","setEditMode","updatedDoc","content","feedDocument","setString","text","setDateTime","asRef","getSubject","removeSubject","feedSourceElements","sort","map","updatedContent","editFeed","includes","title","role","src","editIcon","alt","deleteFeed","deleteIcon","Article","article","articleURL","articleName","href","getArticles","articlesList","WebPage","Articles","articlesDoc","setArticlesList","articlesDocument","articleListElements","deleteArticle","Profile","addArticle","newArticle","SaveButton","articleExists","some","isSaved","setIsSaved","saveArticle","fetchFeed","parser","Parser","parseURL","feed","items","Feed","setFeed","feedItems","getFeed","listItems","item","link","FeedList","feedSources","sources","Dashboard","Home","showProfile","setShowProfile","webId","useWebId","useMemo","profileDoc","describeDocument","isFoundAt","profile","describeSubject","storage","describeContainer","isFoundOn","space","publicTypeIndex","solid","feedSourcesSubject","isEnsuredIn","withRef","TypeRegistration","forClass","articlesSubject","isEnsuredOn","instance","getPodData","undefined","setProfile","fetchedProfileDoc","useProfile","foaf","sshowProfile","LogoutButton","App","LoggedIn","path","LoggedOut","LoginButton","popup","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.2440efce.chunk.js","sourcesContent":["import { rdf, schema } from 'rdf-namespaces';\n\nconst addFeed = async (name, source, feedList) => {\n  const newFeed = feedList.addSubject();\n  newFeed.addRef(rdf.type, schema.DataFeed);\n  newFeed.addString(schema.name, name);\n  newFeed.addString(schema.url, source)\n  newFeed.addDateTime(schema.dateCreated, new Date(Date.now()))\n\n  return await feedList.save([newFeed]);\n}\n\nexport default addFeed;\n","import { schema } from 'rdf-namespaces';\n\nconst byDate = (itemA, itemB) => {\n  const updatedDateA = itemA.getDateTime(schema.dateModified);\n  const updatedDateB = itemB.getDateTime(schema.dateModified);\n  const createdDateA = itemA.getDateTime(schema.dateCreated);\n  const createdDateB = itemB.getDateTime(schema.dateCreated);\n\n  const latestA = updatedDateA ?? createdDateA;\n  const latestB = updatedDateB ?? createdDateB;\n  if (latestB === null) {\n    // No date known for B - A comes first\n    return -1;\n  }\n  if (latestA === null) {\n    // Date known for B but not for A - B comes first\n    return 1;\n  }\n\n  // Whichever was latest comes first:\n  return latestB.getTime() - latestA.getTime();\n}\n\nexport default byDate;\n","import { schema } from 'rdf-namespaces';\n\nconst getFeedSources = (feedSourcesList) => {\n  return feedSourcesList.getSubjectsOfType(schema.DataFeed);\n}\n\nexport default getFeedSources;\n","import { useState, useEffect } from 'react';\nimport { fetchDocument } from 'plandoc';\n\nexport const useDocument = (virtualDocument) => {\n  const [document, setDocument] = useState();\n\n  useEffect(() => {\n    fetchDocument(virtualDocument).then(setDocument);\n  }, [virtualDocument]);\n\n  return [document, setDocument];\n}\n","import { useState } from 'react';\nimport Markdown from 'react-markdown';\nimport { schema } from 'rdf-namespaces';\n\nconst FeedSource = (props) => {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const [feedURL, setFeedURL] = useState(props.feedSource.getString(schema.url) || '');\n  const [feedName, setFeedName] = useState(props.feedSource.getString(schema.name) || '');\n\n  const saveFeedSource = async (event) => {\n    event.preventDefault();\n\n    setIsSubmitting(true);\n    const updatedName = await props.onChange(feedName);\n    if (updatedName) {\n      setFeedName(updatedName.getString(schema.name));\n    }\n\n    const updatedURL = await props.onChange(feedURL);\n    if (updatedURL) {\n      setFeedURL(updatedURL.getString(schema.url));\n    }\n    setIsSubmitting(false);\n  };\n\n  const cancelEdit = (event) => {\n    props.onCancelEdit();\n  };\n\n  if (props.mode === 'editing') {\n    const isLoading = isSubmitting ? 'is-loading' : '';\n\n    return <>\n      <form onSubmit={saveFeedSource} className=\"content\">\n        <div className=\"field\">\n          <div className=\"control\">\n          <label htmlFor=\"feedName\">Feed Name:</label>\n          <input\n            name=\"feedName\"\n            value={feedName}\n            onChange={(e) => { e.preventDefault(); setFeedName(e.target.value); }}\n            type=\"text\"\n            required\n          >\n          </input>\n          <label htmlFor=\"feedURL\">Feed URL:</label>\n          <input\n            name=\"feedURL\"\n            value={feedURL}\n            onChange={(e) => { e.preventDefault(); setFeedURL(e.target.value); }}\n            type=\"url\"\n            required\n          >\n          </input>\n          </div>\n        </div>\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"submit\"\n              className={`button is-primary ${isLoading}`}\n              disabled={isSubmitting}\n            >Save</button>\n          </div>\n          <div className=\"control\">\n            <button onClick={cancelEdit} className=\"button is-text\">\n              Cancel\n            </button>\n          </div>\n        </div>\n      </form>\n    </>;\n  }\n\n  return <>\n    <article className=\"card\">\n      <div className=\"section content\">\n        <Markdown source={feedName || ''}/>\n        <Markdown source={feedURL || ''}/>\n      </div>\n    </article>\n  </>;\n};\n\nexport default FeedSource;\n","import { useState } from 'react';\n\nconst NewFeedSource = ({ onSave }) => {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const [feedURL, setFeedURL] = useState('');\n  const [feedName, setFeedName] = useState('');\n\n  const saveFeedSource = async (event) => {\n    event.preventDefault();\n\n    setIsSubmitting(true);\n    await onSave(feedName, feedURL);\n    setFeedURL('');\n    setFeedName('');\n    setIsSubmitting(false);\n  };\n\n  const isLoading = isSubmitting ? 'is-loading' : '';\n\n  return <>\n    <form onSubmit={saveFeedSource}>\n      <div className=\"field\">\n        <div className=\"control\">\n          <label htmlFor=\"feedName\">Feed Name:</label>\n          <input\n            name=\"feedName\"\n            placeholder=\"EFF\"\n            value={feedName}\n            onChange={(e) => { e.preventDefault(); setFeedName(e.target.value); }}\n            type=\"text\"\n            required\n          >\n          </input>\n          <label htmlFor=\"feedURL\">Feed URL:</label>\n          <input\n            name=\"feedURL\"\n            placeholder=\"ex:https://www.eff.org/rss/updates.xml\"\n            value={feedURL}\n            onChange={(e) => { e.preventDefault(); setFeedURL(e.target.value); }}\n            type=\"url\"\n            required\n          >\n          </input>\n        </div>\n      </div>\n      <div className=\"field\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={`button is-primary ${isLoading}`}\n            disabled={isSubmitting}\n          >Add Feed</button>\n        </div>\n      </div>\n    </form>\n  </>;\n};\n\nexport default NewFeedSource;\n","import React from 'react';\nimport { schema } from 'rdf-namespaces';\nimport editIcon from 'material-design-icons/image/svg/production/ic_edit_48px.svg';\nimport deleteIcon from 'material-design-icons/action/svg/production/ic_delete_48px.svg';\n\nimport addFeed from '../helpers/addFeed';\nimport byDate from '../helpers/byDate';\nimport getFeedSources from '../helpers/getFeedSources';\nimport {useDocument} from '../hooks/useDocument';\nimport FeedSource from './FeedSource';\nimport NewFeedSource from './NewFeedSource';\n\nconst FeedSourceList = ({ podData }) => {\n  const [feedList, updateFeedList] = useDocument(podData.feedSourcesDoc);\n  const [feedInEditMode, setEditMode] = React.useReducer(\n    (prevState, [feedSource, editMode]) => {\n      if (editMode) {\n        return prevState.concat(feedSource);\n      }\n      return prevState.filter((ref) => ref !== feedSource);\n    },\n    [],\n  );\n\n  if (!feedList) {\n    return null;\n  }\n  const feedSourceList = getFeedSources(feedList);\n\n  async function saveFeed(name, source) {\n    if (!feedList) {\n      return;\n    }\n    const updatedDoc = await addFeed(name, source, feedList);\n    updateFeedList(updatedDoc);\n  }\n\n  async function editFeed(content, feedSource) {\n    const feedDocument = feedList;\n    if (!feedDocument) {\n      return;\n    }\n\n    feedSource.setString(schema.text, content);\n    feedSource.setDateTime(schema.dateModified, new Date(Date.now()));\n    const updatedDoc = await feedDocument.save();\n    if (updatedDoc) {\n      setEditMode([feedSource.asRef(), false])\n      updateFeedList(updatedDoc);\n    }\n    return updatedDoc.getSubject(feedSource.asRef());\n  }\n\n  async function deleteFeed(feedSource) {\n    const feedDocument = feedList;\n    if (!feedDocument) {\n      return;\n    }\n\n    feedDocument.removeSubject(feedSource.asRef());\n    const updatedDoc = await feedDocument.save();\n    updateFeedList(updatedDoc);\n  }\n\n  const feedSourceElements = feedSourceList.sort(byDate).map((feedSource) => (\n    <div key={feedSource.asRef()}>\n      <div className=\"columns\">\n        <div className=\"column\">\n          <FeedSource\n            feedSource={feedSource}\n            onChange={(updatedContent) => editFeed(updatedContent, feedSource)}\n            onCancelEdit={() => setEditMode([feedSource.asRef(), false])}\n            mode={feedInEditMode.includes(feedSource.asRef()) ? 'editing' : 'viewing'}\n          />\n        </div>\n        <div className=\"column is-narrow is-2-desktop\">\n          <nav className=\"panel\">\n            {/* Bulma expects an <a>, so I added role=\"button\":  */}\n            {/* eslint-disable-next-line jsx-a11y/anchor-is-valid */}\n            <a\n              onClick={() => setEditMode([feedSource.asRef(), true])}\n              title=\"Edit this feed\"\n              className=\"panel-block\"\n              role=\"button\"\n            >\n              <span className=\"panel-icon\">\n                <img src={editIcon} alt=\"\"/>\n              </span>\n              Edit\n            </a>\n            <a\n              onClick={() => deleteFeed(feedSource)}\n              title=\"Delete this feed\"\n              className=\"panel-block\"\n              role=\"button\"\n            >\n              <span className=\"panel-icon\">\n                <img src={deleteIcon} alt=\"\"/>\n              </span>\n              Delete\n            </a>\n          </nav>\n        </div>\n      </div>\n      <hr/>\n    </div>\n  ));\n\n  return (\n    <>\n      <section className=\"section\">\n        <NewFeedSource onSave={saveFeed}/>\n      </section>\n      <section className=\"section\">\n        {feedSourceElements}\n      </section>\n    </>\n  );\n};\n\nexport default FeedSourceList;\n","import { useState } from 'react';\nimport { schema } from 'rdf-namespaces';\n\nconst Article = ({ article }) => {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  if (!article) {\n    return null;\n  }\n\n  const articleURL = article.getString(schema.url)\n  const articleName = article.getString(schema.name)\n\n  return <>\n    <article className=\"card\">\n      <div className=\"section content\">\n        <a href={articleURL}>{articleName}</a>\n      </div>\n    </article>\n  </>;\n};\n\nexport default Article;\n","import { schema } from 'rdf-namespaces';\n\nconst getArticles = (articlesList) => {\n  return articlesList.getSubjectsOfType(schema.WebPage);\n}\n\nexport default getArticles;\n","import React from 'react';\nimport deleteIcon from 'material-design-icons/action/svg/production/ic_delete_48px.svg';\n\nimport Article from './Article';\n\nimport {useDocument} from '../hooks/useDocument';\nimport byDate from '../helpers/byDate'\nimport getArticles from '../helpers/getArticles';\n\nconst Articles = ({ podData }) => {\n  const [articlesList, setArticlesList] = useDocument(podData.articlesDoc);\n\n  if (!articlesList) {\n    return null;\n  }\n\n  const articles = getArticles(articlesList);\n\n  async function deleteArticle(article) {\n    const articlesDocument = articlesList;\n    if (!articlesDocument) {\n      return;\n    }\n\n    articlesDocument.removeSubject(article.asRef());\n    const updatedDoc = await articlesDocument.save();\n    setArticlesList(updatedDoc);\n  }\n\n  const articleListElements = articles.sort(byDate).map((article) => (\n    <div key={article.asRef()}>\n      <div className=\"columns\">\n        <div className=\"column\">\n          <Article article={article} />\n        </div>\n        <div className=\"column is-narrow is-2-desktop\">\n          <nav className=\"panel\">\n            <a\n              onClick={() => deleteArticle(article)}\n              title=\"Delete this article\"\n              className=\"panel-block\"\n              role=\"button\"\n            >\n              <span className=\"panel-icon\">\n                <img src={deleteIcon} alt=\"\"/>\n              </span>\n              Delete\n            </a>\n          </nav>\n        </div>\n      </div>\n      <hr/>\n    </div>\n  ));\n\n  return (\n    <>\n      <section className=\"section\">\n        {articleListElements}\n      </section>\n    </>\n  );\n};\n\nexport default Articles;\n","import FeedSourceList from '../components/FeedSourceList';\nimport Articles from '../components/Articles';\n\nconst Profile = ({ podData }) => {\n\n  return (\n    <div>\n      <h2>Feeds: </h2>\n      <FeedSourceList podData={podData} />\n      <h2>Saved Articles: </h2>\n      <Articles podData={podData} />\n    </div>\n  )\n}\n\nexport default Profile;\n","import { rdf, schema } from 'rdf-namespaces';\n\nconst addArticle = async (articleName, articleURL, articlesList) => {\n  const newArticle = articlesList.addSubject();\n  newArticle.addRef(rdf.type, schema.WebPage);\n  newArticle.addString(schema.name, articleName);\n  newArticle.addString(schema.url, articleURL)\n\n  return await articlesList.save([newArticle]);\n}\n\nexport default addArticle;\n","import { useState } from 'react';\nimport { schema } from 'rdf-namespaces';\n\nimport addArticle from '../helpers/addArticle';\nimport getArticles from '../helpers/getArticles';\n\nconst SaveButton = ({ articleName, articleURL, articlesList }) => {\n\n  const articles = getArticles(articlesList)\n\n  const articleExists = articles.some(article => article.getString(schema.url) === articleURL)\n\n  const [isSaved, setIsSaved] = useState(articleExists)\n\n  const saveArticle = async (name, url) => {\n    const updatedArticles = await addArticle(name, url, articlesList);\n  }\n\n  const handleSave = (e) => {\n    e.preventDefault();\n    saveArticle(articleName, articleURL);\n    setIsSaved(true);\n  }\n\n  return (\n    <div>\n      <button\n        type='button'\n        disabled={isSaved}\n        onClick={handleSave}\n      >\n        {isSaved ? 'Saved!' : 'Save'}\n      </button>\n    </div>\n  )\n}\n\nexport default SaveButton;\n","import Parser from 'rss-parser'\n\nconst CORS_PROXY = \"https://cors-anywhere.herokuapp.com/\";\n\nexport const fetchFeed = async (url) => {\n  let parser = new Parser();\n  let feed = await parser.parseURL(CORS_PROXY + url);\n  return feed.items;\n}\n","import { useState, useEffect } from 'react';\n\nimport SaveButton from './SaveButton';\nimport { fetchFeed } from '../helpers/fetchFeed.js'\n\nconst Feed = ({ feedSource, feedName, articlesList }) => {\n  const [feed, setFeed] = useState([]);\n\n  useEffect(() => {\n    const getFeed = async () => {\n      const feedItems = await fetchFeed(feedSource)\n      setFeed([...feed, ...feedItems])\n    }\n    getFeed()\n  }, []);\n\n  const listItems = feed.map(item =>\n    <li key={item.link}>\n      <div>\n        [{feedName}]\n        <a href={item.link}>{item.title}</a>\n        <SaveButton articleName={item.title} articleURL={item.link} articlesList={articlesList}/>\n      </div>\n    </li>\n  )\n\n  return (\n    <div>\n      <ul>\n        {listItems}\n      </ul>\n    </div>\n  )\n}\n\nexport default Feed;\n","import { useState, useEffect } from 'react';\nimport { schema } from 'rdf-namespaces';\n\nimport {useDocument} from '../hooks/useDocument';\n\nimport getArticles from '../helpers/getArticles';\nimport getFeedSources from '../helpers/getFeedSources';\n\nimport Feed from './Feed.js';\n\nconst FeedList = ({ podData }) => {\n  const [feedSources, updateFeedSources] = useDocument(podData.feedSourcesDoc);\n  const [articlesList, setArticlesList] = useDocument(podData.articlesDoc);\n\n  if (!feedSources) {\n    return null;\n  }\n  const sources = getFeedSources(feedSources);\n\n  const articles = articlesList ? getArticles(articlesList) : null;\n\n  const listItems = sources.map(source => {\n    const url = source.getString(schema.url)\n    const name = source.getString(schema.name)\n\n    return (\n      <li key={url}>\n        <Feed feedSource={url} feedName={name} articlesList={articlesList} />\n      </li>\n    )\n  })\n\n  return (\n    <div>\n      <ul>\n        {listItems}\n      </ul>\n    </div>\n  )\n}\n\nexport default FeedList;\n","import React from 'react';\n\nimport FeedList from './FeedList';\n\nconst Dashboard = ({ name, podData }) => {\n\n  const title = (name)\n    ? `Welcome to your feed, ${name}`\n    : 'Feed';\n\n  return (\n    <div>\n      <section className=\"section\">\n        <h1 className=\"title\">\n          {title}\n        </h1>\n      </section>\n      <FeedList podData={podData} />\n    </div>\n  );\n};\n\nexport default Dashboard;\n","import { useMemo, useState } from 'react';\nimport { LogoutButton, useWebId } from '@solid/react';\nimport { foaf } from 'rdf-namespaces';\n\nimport Profile from '../pages/Profile';\nimport Dashboard from '../components/Dashboard';\nimport { useProfile } from '../hooks/useProfile';\nimport { getPodData } from '../helpers/getPodData';\n\nconst Home = () => {\n  const [showProfile, setShowProfile] = useState(false);\n  const webId = useWebId();\n  const podData = useMemo(() => (typeof webId === 'string') ? getPodData(webId) : undefined, [webId]);\n  const profile = useProfile(podData);\n\n  if (!podData) {\n    return (\n      <section className=\"section\">\n        <p className=\"content\">Loading data&hellip;</p>\n      </section>\n    );\n  }\n\n  const name = (profile) ? profile.getString(foaf.name) : null;\n\n  const handleClick = (e) => {\n    e.preventDefault()\n    setShowProfile(sshowProfile => !showProfile)\n  }\n\n  return (\n    <div>\n      <div>\n        <button\n          type=\"button\"\n          onClick={handleClick}\n        >\n          {showProfile ? \"Feed\" : \"Profile\"}\n        </button>\n      </div>\n        {\n          showProfile ? <Profile name={name} podData={podData} />: <Dashboard name={name} podData={podData} />\n        }\n      <footer className=\"footer\">\n        <div className=\"columns\">\n          <p className=\"column content\">\n            <a\n              href=\"https://github.com/RRustom/solid-rss\"\n              title=\"View the source code on GitHub\"\n            >Source code</a>\n          </p>\n          <div className=\"column has-text-right\">\n            <LogoutButton className=\"button\"/>\n          </div>\n        </div>\n      </footer>\n    </div>\n  )\n}\n\nexport default Home;\n","import { describeSubject, describeDocument, describeContainer } from 'plandoc';\nimport { space, solid, rdf, schema } from 'rdf-namespaces';\n\nexport const getPodData = (webId) => {\n  const profileDoc = describeDocument().isFoundAt(webId);\n  const profile = describeSubject().isFoundAt(webId);\n\n  const storage = describeContainer().isFoundOn(profile, space.storage);\n\n  const publicTypeIndex = describeDocument().isFoundOn(profile, solid.publicTypeIndex)\n\n  const feedSourcesSubject = describeSubject()\n    .isEnsuredIn(publicTypeIndex)\n    .withRef(rdf.type, solid.TypeRegistration)\n    .withRef(solid.forClass, schema.DataFeed)\n\n  const articlesSubject = describeSubject()\n    .isEnsuredIn(publicTypeIndex)\n    .withRef(rdf.type, solid.TypeRegistration)\n    .withRef(solid.forClass, schema.WebPage)\n\n  const feedSourcesDoc = describeDocument()\n    .isEnsuredOn(feedSourcesSubject, solid.instance, storage);\n\n  const articlesDoc = describeDocument()\n    .isEnsuredOn(articlesSubject, solid.instance, storage);\n\n  return {\n    webId,\n    profileDoc,\n    publicTypeIndex,\n    feedSourcesDoc,\n    articlesDoc\n  };\n}\n","import { useEffect, useState } from 'react';\nimport { fetchDocument } from 'plandoc';\n\nexport const useProfile = (podData) => {\n  const [profile, setProfile] = useState();\n\n  useEffect(() => {\n    if (!podData) {\n      return;\n    }\n\n    fetchDocument(podData.profileDoc).then((fetchedProfileDoc) => {\n      const profile = fetchedProfileDoc?.getSubject(podData.webId);\n      if (!fetchedProfileDoc || !profile) {\n        return;\n      }\n      setProfile(profile);\n    });\n  }, [podData]);\n\n  return profile;\n}\n\n//export default useProfile;\n","import { useEffect, useState } from 'react';\nimport { Router, Link } from '@reach/router';\nimport { LoggedIn, LoggedOut, LoginButton, useWebId } from '@solid/react';\n\nimport Home from './pages/Home';\nimport Profile from './pages/Profile';\n\nconst App = () => {\n  return (\n    <div>\n      <LoggedIn>\n        <Router>\n          <Home path=\"/\" />\n        </Router>\n      </LoggedIn>\n      <LoggedOut>\n        <section className=\"section\">\n          <div className=\"container\">\n            <LoginButton popup=\"popup.html\" className=\"button is-large is-primary\">\n              Log in\n            </LoginButton>\n          </div>\n        </section>\n      </LoggedOut>\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}